// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// base64encode
std::string base64encode(const Rcpp::RawVector& x);
RcppExport SEXP _httpuv_base64encode(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::RawVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(base64encode(x));
    return rcpp_result_gen;
END_RCPP
}
// encodeURI
Rcpp::CharacterVector encodeURI(Rcpp::CharacterVector value);
RcppExport SEXP _httpuv_encodeURI(SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(encodeURI(value));
    return rcpp_result_gen;
END_RCPP
}
// encodeURIComponent
Rcpp::CharacterVector encodeURIComponent(Rcpp::CharacterVector value);
RcppExport SEXP _httpuv_encodeURIComponent(SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(encodeURIComponent(value));
    return rcpp_result_gen;
END_RCPP
}
// decodeURI
Rcpp::CharacterVector decodeURI(Rcpp::CharacterVector value);
RcppExport SEXP _httpuv_decodeURI(SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(decodeURI(value));
    return rcpp_result_gen;
END_RCPP
}
// decodeURIComponent
Rcpp::CharacterVector decodeURIComponent(Rcpp::CharacterVector value);
RcppExport SEXP _httpuv_decodeURIComponent(SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(decodeURIComponent(value));
    return rcpp_result_gen;
END_RCPP
}
// wsconn_address
std::string wsconn_address(Rcpp::IntegerVector handle);
RcppExport SEXP _httpuv_wsconn_address(SEXP handleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type handle(handleSEXP);
    rcpp_result_gen = Rcpp::wrap(wsconn_address(handle));
    return rcpp_result_gen;
END_RCPP
}
// getRNGState
void getRNGState();
RcppExport SEXP _httpuv_getRNGState() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    getRNGState();
    return R_NilValue;
END_RCPP
}

RcppExport SEXP writeHttpuvTcpResponse(SEXP, SEXP);
RcppExport SEXP writeHttpuvWSResponse(SEXP, SEXP, SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_httpuv_base64encode", (DL_FUNC) &_httpuv_base64encode, 1},
    {"_httpuv_encodeURI", (DL_FUNC) &_httpuv_encodeURI, 1},
    {"_httpuv_encodeURIComponent", (DL_FUNC) &_httpuv_encodeURIComponent, 1},
    {"_httpuv_decodeURI", (DL_FUNC) &_httpuv_decodeURI, 1},
    {"_httpuv_decodeURIComponent", (DL_FUNC) &_httpuv_decodeURIComponent, 1},
    {"_httpuv_wsconn_address", (DL_FUNC) &_httpuv_wsconn_address, 1},
    {"_httpuv_getRNGState", (DL_FUNC) &_httpuv_getRNGState, 0},
    {"writeHttpuvTcpResponse", (DL_FUNC) &writeHttpuvTcpResponse, 2},
    {"writeHttpuvWSResponse",  (DL_FUNC) &writeHttpuvWSResponse,  4},
    {NULL, NULL, 0}
};

RcppExport void R_init_httpuv(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
